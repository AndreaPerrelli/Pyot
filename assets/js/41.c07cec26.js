(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{386:function(t,e,s){"use strict";s.r(e);var a=s(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"gatherer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gatherer"}},[t._v("#")]),t._v(" Gatherer")]),t._v(" "),s("p",[t._v("The existence of this object is because of aiohttp's Docs:")]),t._v(" "),s("blockquote",[s("p",[t._v("Don’t create a session per request. Most likely you need a session per application which performs all requests altogether.")]),t._v(" "),s("p",[t._v("More complex cases may require a session per site, e.g. one for Github and other one for Facebook APIs. Anyway making a ses>sion for every request is a very bad idea.")]),t._v(" "),s("p",[t._v("A session contains a connection pool inside. Connection reusage and keep-alives (both are on by default) may speed up total performance.")])]),t._v(" "),s("p",[t._v("Normally the Pyot Pipeline will create a brand new session per "),s("code",[t._v("get()")]),t._v(" and this is a bad idea as aiohttp docs says. So when doing large gathering of data, instead of using "),s("code",[t._v("asyncio.gather()")]),t._v(' you can use this "gatherer".')]),t._v(" "),s("p",[t._v("It will create a session and store this session under each of the pipelines "),s("code",[t._v("sessions")]),t._v(" dict with an "),s("code",[t._v("uuid4()")]),t._v(" key to give the highest uniqueness possible, this session id is added to each of the objects in the "),s("code",[t._v("statements")]),t._v(" provided. After finishing the execution of all the statements, it then proceed to delete the session from the pipeline.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v('For customized gathering of data through Pyot please read below "Custom gathering" section below.')])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("All of the "),s("code",[t._v("statements")]),t._v(" provided needs to be an instance of the Pyot Core object and "),s("strong",[s("em",[s("code",[t._v("get()")]),t._v(" must NOT be appended to the instance, as "),s("code",[t._v("get()")]),t._v(' is "unchainable" so Pyot Gatherer has no way of calling '),s("code",[t._v("set_session_id()")]),t._v(" on a coroutine")])]),t._v(". It will raise a "),s("code",[t._v("RuntimeError")]),t._v(" if this happens.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("INFO")]),t._v(" "),s("p",[s("code",[t._v("query()")]),t._v(" and other methods (that are not coroutines) that returns "),s("code",[t._v("self")]),t._v(" "),s("strong",[s("em",[t._v("are safe and can be appended to the "),s("code",[t._v("statement")])])]),t._v(".\nPyot Gatherer will automatically append "),s("code",[t._v("get()")]),t._v(" to the instance after setting the session id.")])]),t._v(" "),s("h2",{attrs:{id:"pyot-settings-reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pyot-settings-reference"}},[t._v("#")]),t._v(" Pyot Settings Reference")]),t._v(" "),s("p",[t._v("The settings params and default values for the "),s("code",[t._v("GATHERER")]),t._v(" argument in Pyot Settings. Detailed explanation of each param is below.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Keys can be ALL CAPS to keep settings clean.\nFor more in depth explanation of these params please refer to the Pyot Gatherer API section below.")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workers"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"logs_enabled"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"session_class"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" aiohttp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ClientSession"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cancel_on_raise"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h2",{attrs:{id:"pyot-gatherer-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pyot-gatherer-api"}},[t._v("#")]),t._v(" Pyot Gatherer API")]),t._v(" "),s("p",[t._v("This object creates a manager that speeds up the normal data gathering, statements and responses are all instantiated to this object and can be referenced back.\nThis object is imported at Pyot's root level as "),s("code",[t._v("Gatherer")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("div",{staticClass:"highlight-lines"},[s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pyot\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" pyot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Gatherer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" gatherer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OR")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pyot "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Gatherer\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" Gatherer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" gatherer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])]),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("This object is preferably used as a context manager because it will clean up the instance after the "),s("code",[t._v("with")]),t._v(" statement freeing memory, although nothing stops you from doing "),s("code",[t._v("gatherer = pyot.Gatherer()")])])]),t._v(" "),s("blockquote",[s("h3",{attrs:{id:"init-workers-int-30-session-class-any-aiohttp-clientsession-logs-enabled-bool-true-cancel-on-raise-bool-false"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init-workers-int-30-session-class-any-aiohttp-clientsession-logs-enabled-bool-true-cancel-on-raise-bool-false"}},[t._v("#")]),t._v(" "),s("code",[t._v("__init__(workers: int = 30, session_class: Any = aiohttp.ClientSession, logs_enabled: bool = True, cancel_on_raise: bool = False)")])]),t._v(" "),s("p",[t._v("Creates an instance of Gatherer with the respective params, these params are set when Pyot Settings was set if specified the "),s("code",[t._v("GATHERER")]),t._v(" param, you can also override partial settings at runtime by passing the params on instance creation:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("workers")]),t._v(" "),s("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),t._v(" -> "),s("code",[t._v("int")]),t._v(": Maximum number of concurrent connections and tasks allowed for this Gatherer. Defaults to 30.")],1)]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("Since v1.0.6: The default has dropped to 30, and each Gatherer will have its own limit independently. Increasing the number of workers may increase or decrease performance.")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("session_class")]),t._v(" "),s("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),t._v(" -> "),s("code",[t._v("Any")]),t._v(": The session class to be used for creating the session and used for gathering. Defaults to "),s("code",[t._v("aiohttp.ClientSession")])],1),t._v(" "),s("li",[s("code",[t._v("logs_enabled")]),t._v(" "),s("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),t._v(" -> "),s("code",[t._v("bool")]),t._v(": Enables logs for the Gatherer (has nothing to do with pipeline logs). Defaults to "),s("code",[t._v("True")]),t._v(".")],1),t._v(" "),s("li",[s("code",[t._v("cancel_on_raise")]),t._v(" "),s("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),t._v(" -> "),s("code",[t._v("bool")]),t._v(": Cancel all remaining tasks if one raises exception. Defaults to "),s("code",[t._v("False")]),t._v(".")],1)])]),t._v(" "),s("blockquote",[s("h3",{attrs:{id:"statements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statements"}},[t._v("#")]),t._v(" "),s("code",[t._v("statements")]),t._v(" "),s("Badge",{attrs:{text:"property",type:"error",vertical:"middle"}})],1),t._v(" "),s("p",[t._v("Property where statements are stored for gathering, it starts as an empty list, it can be used by "),s("code",[t._v("append()")]),t._v("-ing Pyot Core instances or directly override the list with a prepared one.")])]),t._v(" "),s("blockquote",[s("h3",{attrs:{id:"gather"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gather"}},[t._v("#")]),t._v(" "),s("code",[t._v("gather()")]),t._v(" "),s("Badge",{attrs:{text:"function",type:"error",vertical:"middle"}}),t._v(" "),s("Badge",{attrs:{text:"awaitable",type:"error",vertical:"middle"}})],1),t._v(" "),s("p",[t._v("Starts by appending the new created session and the awaitable "),s("code",[t._v("get()")]),t._v(" to the Pyot Core instance, then starts the gather process, once finished closes the session and saves all responses to "),s("code",[t._v("responses")])])]),t._v(" "),s("blockquote",[s("h3",{attrs:{id:"responses"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#responses"}},[t._v("#")]),t._v(" "),s("code",[t._v("responses")]),t._v(" "),s("Badge",{attrs:{text:"property",type:"error",vertical:"middle"}})],1),t._v(" "),s("p",[t._v("Property where all the responses are saved, developers would want to assign this data to a variable before leaving the "),s("code",[t._v("async with")]),t._v(" statement.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("You can use the same gatherer to "),s("code",[t._v("gather()")]),t._v(" multiple list of statements by overriding it after saving the responses, this creates a nice way to do everything in a single Gatherer, For example: get ChallengerLeague -> all Summoner in the entries -> pull all MatchHistory of the gotten Summoners.")])]),t._v(" "),s("h2",{attrs:{id:"custom-gathering"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#custom-gathering"}},[t._v("#")]),t._v(" Custom Gathering")]),t._v(" "),s("p",[t._v("If you would like to define your own style for gathering data, It is designed to be configurable so you don't need to throw Pyot away !")]),t._v(" "),s("p",[t._v("Pyot relies on session ids for identifying the different sessions to avoid shared resource and unexpected shutdown of unintended session. Each session created is saved using the Pyot Pipeline Low Level API, and the session id is tagged into the Pyot Core object so its "),s("code",[t._v("get()")]),t._v(" coroutine has a way to use the session stored in the pipeline. Below is a common approach that is used to achieve this:")]),t._v(" "),s("ul",[s("li",[t._v("Create a session and generate an uuid for it")]),t._v(" "),s("li",[t._v("Get the list of activated pipelines by importing it: "),s("code",[t._v("from pyot import pipelines")])]),t._v(" "),s("li",[t._v("Set the session with its id on each pipelines "),s("code",[t._v("sessions")]),t._v(" property (dictionary).")]),t._v(" "),s("li",[t._v("Set the session id for each Pyot Core object using its "),s("code",[t._v("set_session_id()")]),t._v(".")]),t._v(" "),s("li",[t._v("Start gathering.")]),t._v(" "),s("li",[t._v("After finishing, delete the session from the pipelines")]),t._v(" "),s("li",[t._v("Close the session.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("For more detailed information of implementing it, please check the Pyot Pipeline Low Level API, Pyot Core objects API and/or source code.")])]),t._v(" "),s("h2",{attrs:{id:"example-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-usage"}},[t._v("#")]),t._v(" Example Usage")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pyot\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" typing "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" List\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pull_leagues")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    league "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" pyot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ChallengerLeague"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"RANKED_SOLO_5x5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" platform"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NA1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" pyot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Gatherer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" gatherer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# type: pyot.Gatherer")]),t._v("\n        gatherer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statements "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("summoner "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" entry "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" league"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("entries"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("62")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" gatherer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gather"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        responses "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gatherer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responses "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# type: List[pyot.lol.Summoner]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" responses"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("profile_icon_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\npyot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pull_leagues"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("A good use of inline type hinting can help you with IDE autocompletion. For example in line 9 I added the type hint of the expected response objects class via comments then on the next "),s("code",[t._v("for")]),t._v(" loop, you don't lose IDE autocompletion. Note: You might not use this if responses contains more than 1 type of Pyot Core objects.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);