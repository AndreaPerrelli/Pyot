(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{429:function(e,t,a){"use strict";a.r(t);var o=a(42),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"about"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about"}},[e._v("#")]),e._v(" About")]),e._v(" "),a("p",[e._v("This module exposes a wide set of utils methods and objects "),a("strong",[a("em",[e._v("highly")])]),e._v(" helpful for development.")]),e._v(" "),a("p",[e._v("If you want to iterate for all the items in events, "),a("strong",[a("em",[e._v("it would be innefficient")])]),e._v(" doing "),a("code",[e._v("await event.item.get()")]),e._v(" for every loop, even if it is cached, because Pyot's stores makes sure that any data is "),a("strong",[a("em",[e._v("safe")])]),e._v(" from any type of mutation, so stores will automatically copy the object before retrieving it, which adds up significant amount of CPU time. Solution would be a local cache that saves a reference to the object, one of the use case of a "),a("code",[e._v("PtrCache")]),e._v(" from this module.")]),e._v(" "),a("p",[e._v("Or if you want to convert a champion key to champion id without the need of pulling an entire "),a("code",[e._v("Champion")]),e._v(" object then the method "),a("code",[e._v("champion_id_by_key")]),e._v(" is here for you. There is also others common tools like the frequently mentioned "),a("code",[e._v("loop_run")]),e._v(", "),a("code",[e._v("fast_copy")]),e._v(" which are even useful outside of Pyot environment.")]),e._v(" "),a("h2",{attrs:{id:"imports"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#imports"}},[e._v("#")]),e._v(" Imports")]),e._v(" "),a("p",[e._v("The methods and objects are organized in submodules but most of them are importable at the root of this module. For example:")]),e._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" pyot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("utils "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" PtrCache\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" pyot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("objects "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" PtrCache\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("Both of these imports are valid, have your taste.")]),e._v(" "),a("h2",{attrs:{id:"legend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#legend"}},[e._v("#")]),e._v(" Legend")]),e._v(" "),a("p",[e._v("-"),a("Badge",{attrs:{text:"function",type:"error",vertical:"middle"}}),e._v(": This is a function.")],1),e._v(" "),a("p",[e._v("-"),a("Badge",{attrs:{text:"awaitable",type:"error",vertical:"middle"}}),e._v(": This is an awaitable.")],1)])}),[],!1,null,null,null);t.default=s.exports}}]);